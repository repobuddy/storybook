import{j as B}from"./jsx-runtime-D_zvdyIk.js";import{r as k}from"./index-D4lIrffr.js";const O={content_wrap:0,ignore:[],ignore_with:"_!i-£___£%_",strict:!1,tab_size:2,tag_wrap:0,tag_wrap_width:80,trim:[]},w="__!i-£___£%__",f="!i-£___£%_",W=["area","base","br","col","embed","hr","img","input","link","meta","param","source","track","wbr"],$=e=>/<(?:[A-Za-z]+[A-Za-z0-9]*)(?:\s+.*?)*?\/{0,1}>/.test(e)||/<(?<Element>(?:[A-Za-z]+[A-Za-z0-9]*:)?(?:[A-Za-z]+[A-Za-z0-9]*))(?:\s+.*?)*?>(?:.|\n)*?<\/{1}\k<Element>>/.test(e)||/<(?<Element>(?:[a-z][a-z0-9._]*:)?[a-z][a-z0-9._]*-[a-z0-9._-]+)(?:\s+.*?)*?>(?:.|\n)*?<\/{1}\k<Element>>/.test(e),Z=(e,n)=>{if(!e||!n)throw new Error("Both 'current' and 'updates' must be passed-in to mergeObjects()");let t;if(Array.isArray(e))t=structuredClone(e).concat(n);else if(typeof e=="object"){t={...e};for(let r of Object.keys(n))typeof n[r]!="object"?t[r]=n[r]:t[r]=Z(t[r]||{},n[r])}return t},F=(e,n)=>Z(structuredClone(e),n),D=e=>(e=e.replace(/<[\w:\-]+([^>]*[^\/])>/g,(n,t)=>n.replace(t,r=>r.replace(/\n/g,f+"nl!").replace(/\r/g,f+"cr!").replace(/\s/g,f+"ws!"))),e),K=e=>e.replace(/\n/g,w+"nl!").replace(/\r/g,w+"cr!").replace(/\s/g,w+"ws!"),V=e=>{const n=/\s*<([a-zA-Z0-9:-]+)[^>]*>\n\s*<\/\1>(?=\n[ ]*[^\n]*__!i-£___£%__[^\n]*\n)(\n[ ]*\S[^\n]*\n)|<([a-zA-Z0-9:-]+)[^>]*>(?=\n[ ]*[^\n]*__!i-£___£%__[^\n]*\n)(\n[ ]*\S[^\n]*\n\s*)<\/\3>/g;return e.replace(n,(t,r,a,s,c)=>{const l=a||c;if(!l)return t;const o=l.replace(/\n/g,w+"nl!").replace(/\r/g,w+"cr!").replace(/\s/g,w+"ws!");return t.replace(l,o)})},J=e=>{const n=/<([A-Za-z][A-Za-z0-9]*|[a-z][a-z0-9._]*-[a-z0-9._-]+)((?:\s+[A-Za-z0-9_-]+="[^"]*"|\s*[a-z]*)*)>/g;return e=e.replace(n,(t,r,a)=>t.replace(a,s=>s.replace(/</g,f+"lt!").replace(/>/g,f+"gt!"))),e},X=(e,n)=>{for(let t=0;t<n.length;t++){const r=new RegExp(`(<${n[t]}[^>]*>)\\s+`,"g"),a=new RegExp(`\\s+(</${n[t]}>)`,"g");e=e.replace(r,"$1").replace(a,"$1")}return e},Y=e=>(e=e.replace(/<[\w:\-]+([^>]*[^\/])>/g,(n,t)=>n.replace(t,r=>r.replace(new RegExp(f+"nl!","g"),`
`).replace(new RegExp(f+"cr!","g"),"\r").replace(new RegExp(f+"ws!","g")," "))),e),Q=e=>(e=e.replace(/.*__!i-£___£%__[a-z]{2}!.*/g,n=>n.replace(/__!i-£___£%__[a-z]{2}!/g,t=>t.replace(new RegExp(w+"nl!","g"),`
`).replace(new RegExp(w+"cr!","g"),"\r").replace(new RegExp(w+"ws!","g")," "))),e),C=f.replace(/[-\/\\^$*+?.()|[\]{}]/g,"\\$&"),ee=new RegExp(C+"lt!","g"),te=new RegExp(C+"gt!","g"),re=e=>{const n=/<([\w:\-]+)([^>]*)>/g;return e.replace(n,(t,r,a)=>{const s=a.replace(ee,"<").replace(te,">");return`<${r}${s}>`})},ne=e=>{var r,a;if(typeof e!="object")throw new Error("Config must be an object.");if(!(Object.hasOwn(e,"content_wrap")||Object.hasOwn(e,"ignore")||Object.hasOwn(e,"ignore_with")||Object.hasOwn(e,"strict")||Object.hasOwn(e,"tab_size")||Object.hasOwn(e,"tag_wrap")||Object.hasOwn(e,"tag_wrap_width")||Object.hasOwn(e,"trim")))return O;let t=e.tab_size;if(t){if(typeof t!="number")throw new Error(`tab_size must be a number, not ${typeof e.tab_size}.`);if(!Number.isSafeInteger(t))throw new Error(`Tab size ${t} is not safe. See https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number/isSafeInteger for more info.`);if(t=Math.floor(t),t<1||t>16)throw new Error("Tab size out of range. Expecting 1 to 16.");e.tab_size=t}if(Object.hasOwn(e,"content_wrap")&&typeof e.content_wrap!="number")throw new Error(`content_wrap config must be a number, not ${typeof e.tag_wrap_width}.`);if(Object.hasOwn(e,"ignore")&&(!Array.isArray(e.ignore)||!((r=e.ignore)!=null&&r.every(s=>typeof s=="string"))))throw new Error("Ignore config must be an array of strings.");if(Object.hasOwn(e,"ignore_with")&&typeof e.ignore_with!="string")throw new Error(`Ignore_with config must be a string, not ${typeof e.ignore_with}.`);if(Object.hasOwn(e,"strict")&&typeof e.strict!="boolean")throw new Error(`Strict config must be a boolean, not ${typeof e.strict}.`);if(Object.hasOwn(e,"tag_wrap")&&typeof e.tag_wrap=="boolean"&&(console.warn("tag_wrap as a boolean is deprecated, and will not be supported in v0.9.0+. Use `tag_wrap: <number>` instead; where <number> is the max character width acceptable before wrapping attributes."),e.tag_wrap_width?e.tag_wrap=e.tag_wrap_width:e.tag_wrap=O.tag_wrap_width),Object.hasOwn(e,"tag_wrap")&&typeof e.tag_wrap!="number")throw new Error(`tag_wrap config must be a number, not ${typeof e.tag_wrap}.`);if(Object.hasOwn(e,"tag_wrap_width")&&console.warn("tag_wrap_width is deprecated, and will not be supported in v0.9.0+. Use `tag_wrap: <number>` instead; where <number> is the max character width acceptable before wrapping attributes."),Object.hasOwn(e,"tag_wrap_width")&&typeof e.tag_wrap_width!="number")throw new Error(`tag_wrap_width config must be a number, not ${typeof e.tag_wrap_width}.`);if(Object.hasOwn(e,"trim")&&(!Array.isArray(e.trim)||!((a=e.trim)!=null&&a.every(s=>typeof s=="string"))))throw new Error("Trim config must be an array of strings.");return F(O,e)},ae=(e,n,t)=>{const r=e.trim().split(/\s+/);if(r.length===0||r.length===1&&r[0]==="")return"";const a=[];let s="";const c=t;r.forEach(o=>{if(o==="")return;if(o.length>=n){s!==""&&a.push(a.length===0?t+s:c+s),a.push(a.length===0?t+o:c+o),s="";return}const _=s===""?o:s+" "+o;_.length<=n?s=_:(s!==""&&a.push(a.length===0?t+s:c+s),s=o)}),s!==""&&a.push(a.length===0?t+s:c+s);const l=a.join(`
`);return K(l)};function se(e,n){let t=e;const r=new Map;let a=0;const s="___HTMLFY_SPECIAL_IGNORE_MARKER_";for(const c of n.ignore){const l=c.replace(/[-\/\\^$*+?.()|[\]{}]/g,"\\$&"),o=new RegExp(`<${l}[^>]*>.*?</${l}>`,"gs");let _;const d=[];for(;(_=o.exec(t))!==null;){const i=`${s}${a++}___`;r.set(i,_[0]),d.push({start:_.index,end:o.lastIndex,marker:i})}for(let i=d.length-1;i>=0;i--){const u=d[i];t=t.substring(0,u.start)+u.marker+t.substring(u.end)}}return{html_with_markers:t,extracted_map:r}}function ie(e,n){let t=e;for(const[r,a]of n)t=t.split(r).join(a);return t}const oe=(e,n=!0)=>n&&!$(e)?e:e.replace(/<([a-zA-Z\-0-9:]+)[^>]*>/g,(t,r)=>W.indexOf(r)>-1?`${t.substring(0,t.length-1)} />`.replace(/\/\s\//g,"/"):t.replace(/[\s]?\/>/g,`></${r}>`)),ce=(e,n=!1)=>(e=e.replace(/<textarea[^>]*>((.|\n)*?)<\/textarea>/g,(t,r)=>t.replace(r,a=>a.replace(/</g,"&lt;").replace(/>/g,"&gt;").replace(/"/g,"&quot;").replace(/'/g,"&apos;").replace(/\n/g,"&#10;").replace(/\r/g,"&#13;").replace(/\s/g,"&nbsp;"))),n&&(e=e.replace(/<textarea[^>]*>((.|\n)*?)<\/textarea>/g,(t,r)=>(t=t.replace(r,a=>a.replace(/\n|\t/g,"").replace(/[a-z]+="\s*"/ig,"").replace(/>\s+</g,"><").replace(/\s+/g," ")),t=t.replace(/\s+/g," ").replace(/\s>/g,">").replace(/>\s/g,">").replace(/\s</g,"<").replace(/class=["']\s/g,a=>a.replace(/\s/g,"")).replace(/(class=.*)\s(["'])/g,"$1$2"),t))),e),pe=(e,n=!0)=>(n&&!$(e)||(e=ce(e),e=e.replace(/\n|\t/g,""),e=e.replace(/>\s+</g,"><"),e=e.replace(/ {2,}/g," "),e=e.replace(/ >/g,">"),e=e.replace(/ </g,"<"),e=e.replace(/> /g,">"),e=e.replace(/<\s*\//g,"</"),e=e.replace(/ = /g,"="),e=e.replace(/([a-zA-Z0-9_-]+)=(['"])(.*?)\2/g,(t,r,a,s)=>{const c=s.trim();return`${r}=${a}${c}${a}`}),e=e.trim()),e);let z,A;const y={line:[]};let v;const le=e=>{y.line=[];let n=-1;const t=/(<[^>]+>)|([^<]+)/g;return e=e.replace(t,(r,a,s)=>(a?y.line.push({type:"tag",value:r}):s&&s.trim().length>0&&y.line.push({type:"text",value:r}),n++,`
[#-# : ${n} : ${r} : #-#]
`)),e},ge=e=>(e=oe(e,!1),A.length>0&&(e=X(e,A)),e=pe(e,!1),e=le(e),e),_e=(e,n)=>{const t=" ".repeat(n.tab_size),r=n.tag_wrap,a=n.content_wrap,c=`-${n.ignore_with}`;let l="";const o=[],_=/<[A-Za-z]+\b[^>]*(?:.|\n)*?\/?>/g,d=/\s{1}[A-Za-z-]+(?:=".*?")?/g;y.line.forEach((u,R)=>{let p=u.value;const T=p.startsWith(c+"lt--")||p.startsWith(c+"gt--")||p.startsWith(c+"nl--")||p.startsWith(c+"cr--")||p.startsWith(c+"ws--")||p.startsWith(c+"tab--");let b=0;const h=y.line[R-1],x=(h==null?void 0:h.value)??"";l+="0",R===0&&b++,p.trim().startsWith("</")&&b++,x.trim().startsWith("<!doctype")&&b++,x.trim().startsWith("<!--")&&b++,x.trim().endsWith("/>")&&b++,x.trim().startsWith("</")&&b++,(h==null?void 0:h.type)==="text"&&b++;const I=Math.max(0,l.length-b);if(l=l.substring(0,I),u.type==="text"&&/^[!,;\.]/.test(p))if(p.length===1){o[o.length-1]=o.at(-1)+p;return}else o[o.length-1]=o.at(-1)+p.charAt(0),p=p.slice(1).trim();const m=t.repeat(I);if(T)o.push(p);else{if(z&&p.trim().startsWith("<!--"))return;let g=p;if(u.type==="text"&&a>0&&g.length>=a)g=ae(g,a,m);else if(r>0&&g.length>r&&_.test(g)){_.lastIndex=0,d.lastIndex=0;const E=g.split(d).filter(Boolean);if(E.length>=2){const N=g.matchAll(d),M=m+t;let j=m+E[0]+`
`;for(const P of N){const q=P[0].trim();j+=M+q+`
`}const S=E[0].match(/<([A-Za-z_:-]+)/),H=S?S[1]:"",G=W.includes(H),L=E[1].trim(),U=m+(z&&G?" ":"");j+=U+L,g=j}else g=m+g}else g=m+g;o.push(g)}});let i=o.join(`
`);return r>0&&(i=D(i)),a>0&&/\n[ ]*[^\n]*__!i-£___£%__[^\n]*\n/.test(i)&&(i=V(i)),i=i.replace(/<(?<Element>.+).*>[^<]*?[^><\/\s][^<]*?<\/{1}\k<Element>|<script[^>]*>\s+<\/script>|<(\w+)>\s+<\/(\w+)|<(?:([\w:\._-]+)|([\w:\._-]+)[^>]*[^\/])>\s+<\/([\w:\._-]+)>/g,u=>u.replace(/\n|\t|\s{2,}/g,"")),a>0&&(i=Q(i)),r>0&&(i=Y(i)),z&&(i=i.replace(/\s\/>|\/>/g,">")),i.startsWith(`
`)&&(i=i.substring(1)),i.endsWith(`
`)&&(i=i.substring(0,i.length-1)),i},ue=(e,n)=>{if(!$(e))return e;const t=n?ne(n):O;z=t.strict;const r=t.ignore.length>0;if(A=t.trim,r){const{html_with_markers:a,extracted_map:s}=se(e,t);e=a,v=s}return e=J(e),e=ge(e),e=_e(e,t),e=re(e),r&&(e=ie(e,v)),e};function we({selector:e='[data-testid="subject"]',config:n,...t}){const[r,a]=k.useState("");return k.useEffect(()=>{const s=document.querySelector(e);a(s?ue(s.outerHTML,{tag_wrap:40,...n}):"No subject found")},[e]),B.jsx("pre",{...t,children:r})}we.__docgenInfo={description:`A component that displays the HTML of a subject element.
Uses \`htmlfy\` internally to format and prettify the HTML output.

@param selector - CSS selector to find the subject element. Defaults to '[data-testid="subject"]'
@param config - Configuration options passed to htmlfy's prettify function
@param props - Additional props (className, style) passed to the pre element
@returns A pre element containing the formatted HTML`,methods:[],displayName:"ShowHtml",props:{selector:{required:!1,tsType:{name:"union",raw:"string | undefined",elements:[{name:"string"},{name:"undefined"}]},description:"",defaultValue:{value:`'[data-testid="subject"]'`,computed:!1}},config:{required:!1,tsType:{name:"union",raw:"UserConfig | undefined",elements:[{name:"UserConfig"},{name:"undefined"}]},description:""}}};export{we as S};

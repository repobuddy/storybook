---
description: This rule should be used when generating commit messages
globs:
alwaysApply: false
---
# Commit Message Guidelines

Commit messages in this project must follow the [Conventional Commits](mdc:https:/www.conventionalcommits.org) specification, as enforced by [commitlint.config.js](mdc:commitlint.config.js).

This rule should be used when generating commit messages.

## Step-by-step Instructions

1. **Determine what changes to analyze**:
   - Use `git diff --cached` to see staged changes only
   - If there are staged changes, analyze ONLY staged changes
   - Otherwise, use `git status` to see overall changes
   - Use `git diff` to see detail changes

2. **Write your commit message in the following format**:

	```
	<type>[optional scope]: <description>

	[optional body]

	[optional footer(s)]
	```

3. **Choose the appropriate type**:
   - `feat`: New features
   - `fix`: Bug fixes
   - `docs`: Documentation changes
   - `style`: Code style changes (formatting, missing semicolons, etc.)
   - `refactor`: Code refactoring (no functional changes)
   - `test`: Adding or updating tests
   - `chore`: Build process, tooling, or configuration changes
   - `perf`: Performance improvements

4. **Add scope when helpful** (e.g., `chore(rules)`, `fix(auth)`, `docs(api)`)

5. **Write a clear description** that explains the purpose, not just what changed

6. **Add body for complex changes** with additional context or breaking change notes

## Examples

### Simple fix

```text
fix(component): resolve button hover state not working in dark mode
```

### Feature with body

```text
feat(api): add user authentication endpoint

Implements JWT-based authentication for user login with proper error handling and validation.

BREAKING CHANGE: The login endpoint now requires a password field.
```

### Configuration change

```text
chore: update TypeScript configuration for stricter type checking
```

## Special Cases

- **Chore changes**: If changes are only in `.cursor/rules`, `.github`, or `.vscode` folders, always use `chore` type
- **Cursor rules scope**: When changing cursor rules (files in `.cursor/rules`), use `chore(rules)` as the type and scope
- **Breaking changes**: Include `BREAKING CHANGE:` in the body
- **Multiple unrelated changes**: Consider splitting into multiple commits or use a general type like `chore`

## Validation

- Commit messages are automatically validated via Husky and `commitlint`
- No strict length requirements for subject, header, or body (see [`commitlint.config.js`](mdc:commitlint.config.js))

When you use this rule file, let me know this rule file is being used in the chat by mentioning the rule filename.

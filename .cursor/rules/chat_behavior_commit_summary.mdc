---
description:
globs:
alwaysApply: true
---
# Chat Behavior - Commit Summary Guidelines

This rule governs how to handle commit message generation and change summarization at the end of chat sessions.

## When to Generate Commit Messages

Generate a commit message when:
- When you summarize your changes
- The conversation is ending
- The user asks for a commit message to copy
- Multiple files were created, modified, or deleted during the session

## Commit Message Generation Process

1. **Analyze Changes**: Review all files that were created, modified, or deleted during the conversation
2. **Follow Conventional Commits**: Use the format specified in [commit_messages.mdc](mdc:.cursor/rules/commit_messages.mdc)
3. **Provide Copy-Ready Format**: Present the commit message in a format that can be easily copied and pasted
4. **Include Context**: Briefly summarize what was accomplished in the conversation

## Response Format

When generating a commit message, use this format:

### Summary Section
```
## Summary of Changes

[Brief description of what was accomplished in this conversation]
```

### Commit Message Section
```
## Commit Message

```
[COMMIT_MESSAGE]
[optional body]
```

You can copy the commit message above and use it with `git commit -m "..."` or your preferred git workflow.
```

## Examples

### Example 1: Storybook Component Development
```
## Summary of Changes

Created a new `ShowHtml` component for displaying formatted HTML output in Storybook stories, with TypeScript support and comprehensive props interface.

## Commit Message

```
feat(storybook): add ShowHtml component for HTML display

- Implements component to display and prettify HTML from DOM elements
- Uses htmlfy library for HTML formatting with configurable options
- Includes TypeScript definitions and comprehensive JSDoc documentation
- Supports custom selectors and configuration options
- Adds Storybook stories for component documentation and testing
```
```

### Example 2: Storybook Addon Enhancement
```
## Summary of Changes

Enhanced the tag badges addon with new badge types for testing and development workflows, including unit, integration, and snapshot test indicators.

## Commit Message

```
feat(storybook): enhance tag badges with testing indicators

- Add unit test badge (ðŸ§ª) for stories with unit tests
- Add integration test badge (ðŸ”—) for stories with integration tests
- Add snapshot test badge (ðŸ“¸) for stories with snapshot testing
- Improve badge configuration with proper display options
- Update TypeScript types to support new badge parameters
```
```

### Example 3: Documentation Update
```
## Summary of Changes

Updated project documentation and added new Cursor rules for better development workflow.

## Commit Message

```
docs: update project documentation and add cursor rules

- Added comprehensive component development guidelines
- Created new cursor rules for chat behavior and commit summaries
- Updated README with improved setup instructions
```
```

## Special Cases

- **Multiple unrelated changes**: Consider splitting into multiple commits or use a general type like `chore` or `refactor`
- **Configuration changes**: Use `chore` type for config files, build tools, etc.
- **Cursor rules only**: Always use `chore` type for `.cursor/rules` changes
- **Breaking changes**: Include `BREAKING CHANGE:` in the commit body

## Commit Message Best Practices

1. **Use imperative mood**: "Add feature" not "Added feature" or "Adding feature"
2. **Keep first line under 50 characters**: This ensures good display in git tools
3. **Separate subject from body**: Use a blank line between the subject and body
4. **Use body to explain what and why**: Focus on the motivation and context
5. **Reference issues**: Include issue numbers when applicable (e.g., "Fixes #123")

## Integration with Existing Rules

This rule works in conjunction with:
- [commit_messages.mdc](mdc:.cursor/rules/commit_messages.mdc) - For commit message format and conventions
- [master.mdc](mdc:.cursor/rules/master.mdc) - For overall rule organization

When you use this rule file, let me know this rule file is being used in the chat by mentioning the rule filename.

---
description:
globs:
alwaysApply: false
---
# Styling Patterns and Best Practices

This repository uses Tailwind CSS 4 for styling with comprehensive theme support. Follow these patterns for consistent and maintainable styles.

## Quick Reference

### Essential Setup
```css
/* tailwind.css */
@import "tailwindcss";

@theme {
  --color-primary-500: #3b82f6;
  --color-surface-light: #ffffff;
  --color-surface-dark: #1f2937;
}
```

```ts
// vite.config.ts
import { defineConfig } from 'vite'
import react from '@vitejs/plugin-react'
import tailwindcss from '@tailwind/vite'

export default defineConfig({
  plugins: [react(), tailwindcss()]
})
```

## Component Styling Patterns

### Basic Component with Variants

```tsx
interface ButtonProps {
  variant?: 'primary' | 'secondary' | 'danger'
  size?: 'small' | 'medium' | 'large'
  className?: string
}

export function Button({ variant = 'primary', size = 'medium', className }: ButtonProps) {
  const baseClasses = 'rounded-md font-medium transition-colors focus:outline-none focus:ring-2'

  const variantClasses = {
    primary: 'bg-blue-500 text-white hover:bg-blue-600 focus:ring-blue-500',
    secondary: 'bg-gray-500 text-white hover:bg-gray-600 focus:ring-gray-500',
    danger: 'bg-red-500 text-white hover:bg-red-600 focus:ring-red-500'
  }

  const sizeClasses = {
    small: 'px-3 py-1 text-sm',
    medium: 'px-4 py-2 text-base',
    large: 'px-6 py-3 text-lg'
  }

  const classes = [baseClasses, variantClasses[variant], sizeClasses[size], className]
    .filter(Boolean).join(' ')

  return <button className={classes}>Button</button>
}
```

### Conditional Styling with clsx

```tsx
import { clsx } from 'clsx'

export function ConditionalComponent({ isActive, isDisabled, className }: ComponentProps) {
  const classes = clsx(
    'px-4 py-2 rounded-md transition-all',
    isActive && 'bg-blue-500 text-white',
    !isActive && 'bg-gray-100 text-gray-900 hover:bg-gray-200',
    isDisabled && 'opacity-50 cursor-not-allowed',
    className
  )

  return <div className={classes}>Content</div>
}
```

### Dark Mode Support

```tsx
export function ThemeAwareComponent() {
  return (
    <div className="
      bg-white dark:bg-gray-900
      text-gray-900 dark:text-white
      border border-gray-200 dark:border-gray-700
      rounded-lg p-4
    ">
      <h2 className="text-xl font-semibold mb-2">
        Theme Aware Title
      </h2>
      <p className="text-gray-600 dark:text-gray-300">
        Adapts to light and dark themes.
      </p>
    </div>
  )
}
```

## Tailwind 4 Modern Features

### Container Queries (Preferred over Media Queries)

```tsx
export function ContainerQueryComponent() {
  return (
    <div className="@container bg-white dark:bg-gray-800 rounded-lg p-4">
      <div className="
        space-y-4
        @lg:grid @lg:grid-cols-2 @lg:gap-6 @lg:space-y-0
      ">
        <div className="text-base @xl:text-lg font-medium">
          Responsive content
        </div>
        <div className="text-sm @xl:text-base text-gray-600 dark:text-gray-300">
          Adapts to container size
        </div>
      </div>
    </div>
  )
}
```

### Logical Properties (Better RTL Support)

```tsx
export function LogicalComponent() {
  return (
    <div className="
      margin-inline: auto
      padding-block: 1rem
      padding-inline: 1.5rem
      border-inline-start: 4px solid blue-500
      text-align: start
    ">
      Content with logical properties
    </div>
  )
}
```

### Modern Color Functions

```tsx
export function ModernColorComponent() {
  return (
    <div className="
      background: color-mix(in srgb, blue-500 50%, transparent)
      color: color-contrast(white vs gray-900, blue-500)
    ">
      Modern color features
    </div>
  )
}
```

## Utility Class Patterns

### Common Layout Utilities

```ts
const layoutClasses = {
  container: 'max-w-7xl mx-auto px-4 sm:px-6 lg:px-8',
  card: 'bg-white dark:bg-gray-800 rounded-lg shadow-md p-6',
  flexCenter: 'flex items-center justify-center',
  flexBetween: 'flex items-center justify-between'
}

const spacingClasses = {
  section: 'space-y-6',
  stack: 'space-y-4',
  inline: 'space-x-4'
}

const typographyClasses = {
  heading: 'text-2xl font-bold text-gray-900 dark:text-white',
  subheading: 'text-lg font-semibold text-gray-700 dark:text-gray-300',
  body: 'text-base text-gray-600 dark:text-gray-400'
}
```

### Transition and Animation Patterns

```ts
const transitionClasses = {
  fast: 'transition-all duration-150 ease-in-out',
  normal: 'transition-all duration-200 ease-in-out',
  slow: 'transition-all duration-300 ease-in-out'
}

const hoverEffects = {
  lift: 'hover:transform hover:scale-105 hover:shadow-lg',
  glow: 'hover:shadow-lg hover:shadow-blue-500/25'
}
```

## Accessibility Patterns

### Focus Management

```tsx
export function AccessibleButton() {
  return (
    <button
      className="
        bg-blue-600 text-white px-4 py-2 rounded-md
        hover:bg-blue-700
        focus:outline-none focus:ring-2 focus:ring-blue-500 focus:ring-offset-2
      "
      aria-label="Submit form"
    >
      Submit
    </button>
  )
}
```

### Skip Link

```tsx
export function SkipLink() {
  return (
    <a
      href="#main-content"
      className="
        sr-only focus:not-sr-only focus:absolute focus:top-4 focus:left-4
        bg-blue-600 text-white px-4 py-2 rounded-md z-50
      "
    >
      Skip to main content
    </a>
  )
}
```

## Best Practices

### Class Organization
1. **Group related classes**: Layout → Spacing → Typography → Colors → Effects
2. **Mobile first**: Start with mobile, add responsive variants
3. **Use clsx for conditionals**: Cleaner than string concatenation
4. **Prefer utility classes**: Over custom CSS when possible

### Performance
1. **Container queries**: Use `@container` for component-level responsiveness
2. **Logical properties**: Use for better internationalization
3. **Modern colors**: Leverage color functions for manipulation
4. **Purge unused styles**: Ensure production builds are optimized

### Theme Support
1. **Always include dark mode**: Use `dark:` variants consistently
2. **Semantic color tokens**: Use `--color-surface-*` and `--color-content-*`
3. **High contrast**: Ensure sufficient contrast ratios
4. **Reduced motion**: Respect `prefers-reduced-motion`

### Responsive Design
1. **Container queries first**: Use `@container` for component responsiveness
2. **Media queries second**: Use for page-level layout changes
3. **Touch targets**: Minimum 44px for interactive elements
4. **Logical properties**: Better RTL and internationalization support

When you use this rule file, let me know this rule file is being used in the chat by mentioning the rule filename.

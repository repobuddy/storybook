---
description:
globs:
alwaysApply: true
---
# Monorepo Best Practices

This repository is a Storybook-focused monorepo using pnpm workspaces and Turbo. Follow these patterns for consistent development.

## Repository Structure

### Workspace Organization

- **Root**: Contains shared configuration, CI/CD, and workspace management
- **`apps/`**: Contains applications (e.g., `app/` for demo/storybook app)
- **`libs/`**: Contains shared libraries (e.g., `storybook/` for the main library)
- **`tools/`**: Contains development tools and utilities

### Key Configuration Files

- [pnpm-workspace.yaml](mdc:pnpm-workspace.yaml) - Defines workspace packages
- [turbo.json](mdc:turbo.json) - Build system configuration
- [biome.jsonc](mdc:biome.jsonc) - Linting and formatting
- [package.json](mdc:package.json) - Root package with shared dependencies

## Package Management

### Workspace Dependencies

- Use `workspace:*` for internal dependencies between packages
- Example: `"@repobuddy/storybook": "workspace:*"`

### Scripts

- Root scripts use `turbo run` for cross-package operations
- Package-specific scripts use `pnpm --filter <package-name>`
- Common commands:
  - `pnpm build` - Build all packages
  - `pnpm test` - Run tests across all packages
  - `pnpm sb` - Run commands for the main library
  - `pnpm app` - Run commands for the demo app

### Package.json Patterns

```json
{
  "name": "@repobuddy/package-name",
  "type": "module",
  "exports": {
    ".": {
      "types": "./esm/index.d.ts",
      "default": "./esm/index.js"
    }
  },
  "files": [
    "cjs",
    "esm",
    "src",
    "!**/*.{spec,test,unit,accept,integrate,system,perf,stress,study,stories}.*"
  ]
}
```

## Build System (Turbo)

### Task Configuration

- Tasks are defined in [turbo.json](mdc:turbo.json)
- Use `dependsOn` for build dependencies
- Define `inputs` and `outputs` for caching
- Use `persistent: true` for watch tasks

### Common Tasks

- `build` - Build packages with dependencies
- `test` - Run tests with coverage
- `coverage` - Generate coverage reports
- `clean` - Clean build artifacts
- `sb:build` - Build Storybook documentation

## Development Workflow

### Adding New Packages

1. Create directory in `apps/` or `libs/`
2. Initialize package.json with proper name and exports
3. Add to [pnpm-workspace.yaml](mdc:pnpm-workspace.yaml) if needed
4. Configure build scripts and dependencies
5. Add to Turbo workspace configuration

### Cross-Package Development

- Use workspace dependencies for internal packages
- Import using package names: `import { Component } from '@repobuddy/storybook'`
- Use relative imports for internal package files
- Configure TypeScript project references for proper builds

### Testing Strategy

- Each package has its own test configuration
- Use Vitest for unit and integration tests
- Storybook stories serve as component tests
- Visual regression testing with `storybook-addon-vis`
- Coverage reports aggregated at root level

## Code Quality

### Linting and Formatting

- Biome for linting and formatting (see [biome.jsonc](mdc:biome.jsonc))
- Tab indentation (not spaces)
- No trailing commas in JavaScript/TypeScript
- Consistent import organization

### TypeScript Configuration

- Strict TypeScript settings
- Project references for proper dependency management
- Shared types in dedicated packages
- Proper export/import typing

### Git Workflow

- Conventional commits with commitlint
- Husky pre-commit hooks
- Changesets for versioning and releases
- Automated CI/CD with GitHub Actions

## Storybook Integration

### Package Structure

- Each package can have its own `.storybook/` configuration
- Shared Storybook addons in the main library
- Visual testing with multiple theme configurations
- Accessibility testing integrated

### Story Organization

- Stories co-located with components
- Use `.stories.tsx` extension
- Follow naming conventions from [Storybook Stories](mdc:.cursor/rules/guidelines/storybook_stories.mdc)
- Tag-based organization for better discoverability

## Performance Considerations

### Build Optimization

- Turbo caching for faster builds
- Selective builds based on changes
- Proper dependency management
- Tree-shaking friendly exports

### Development Experience

- Hot module replacement in development
- Fast test execution with Vitest
- Parallel task execution
- Efficient dependency installation with pnpm

## Best Practices Summary

1. **Package Structure**: Keep packages focused and well-defined
2. **Dependencies**: Use workspace dependencies for internal packages
3. **Scripts**: Leverage Turbo for efficient task execution
4. **Testing**: Comprehensive testing at package and integration levels
5. **Documentation**: Use Storybook for component documentation
6. **Quality**: Consistent linting, formatting, and TypeScript usage
7. **CI/CD**: Automated testing, building, and deployment
8. **Versioning**: Use Changesets for proper version management

When you use this rule file, let me know this rule file is being used in the chat by mentioning the rule filename.

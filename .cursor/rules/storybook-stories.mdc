---
description: Story Creation
globs:
alwaysApply: false
---
# Writing Storybook Stories

This document outlines the standards and best practices for creating Storybook stories in our project.

## Basic Story Structure

1. Use the new Component Story Format (CSF) with TypeScript:
   ```typescript
   import type { Meta, StoryObj } from '@storybook/react'

   const meta: Meta<typeof YourComponent> {
		 title: 'components/YourComponent',
		 tags: ['new', 'version:1.0'],
     component: YourComponent,
     // Add parameters if needed
   } satisfies Meta

   export default meta

   type Story = StoryObj<typeof meta>

   export const BasicUsage: Story = {
     // Story implementation
   }
   ```

## Story Organization

1. Story files should:
   - Be placed next to the source file
   - Use the `.stories.tsx` extension
   - Follow the naming pattern: `source_name.stories.tsx`
   - When testing a specific prop, name the story a `source_name.the_prop.stories.tsx`
2. Do not create shared demo component for utility function.
3. Story naming conventions:
   - Default/primary story should be named `BasicUsage`
   - Additional stories should be named descriptively: `WithError`, `Loading`, etc.
   - Use `name` property if the story is about a particular props or value:
	 ```ts
	 export const Red100: Story = {
		name: 'red-100'
	 }
	 ```
   - Use Add additional description to the story:
   ```ts
	 import { defineDocsParam } from '@repobuddy/storybook'

	 export const SomeStory: Story = {
		parameters: defineDocsParam({
			description: {
				story: 'Additional message goes here'
			}
		})
	 }
	 ```

## Story Implementation Patterns

1. The properties in the story should follow consistent order. Some of these tests are optional:
   ```tsx
	 export const SomeStory: Story = {
		 name: ...,
		 tags: ...,
		 parameters: ...,
		 args: ...,
		 loaders: ...,
		 decorators: ...,
		 render: ...,
		 play: ...,
		 experimental_afterEach: ...
	 }
	 ```
2. Use the render function to emphasize the testing subject.
   For example, when creating a story to test the `onChange` handler of the `RadioGroup` component:
	 ```tsx
	 // ✅ Good example
	 export const OnChange: Story = {
		  render() {
			  const [logs, setLogs] = useState<string[]>([])

				return (
					<div>
					  <RadioGroup onChange={(value) => {
							setLogs(logs => [...logs, `selection changed: ${value}`])
						}}>
						  <Radio value="apple">Apple</Radio>
							<Radio value="banana">Banana</Radio>
						</RadioGroup>
						<LogPanel logs={logs}>
					<div>
				)
			}
	 }

	 // ❌ Bad example - the div showing log messages is noise and should be extracted as a `LogPanel` component.
	 export const OnChange: Story = {
		  render() {
			  const [logs, setLogs] = useState<string[]>([])

				return (
					<div>
					  <RadioGroup onChange={value => {
							setLogs(logs => [...logs, `selection changed: ${value}`])
						}}>
						  <Radio value="apple">Apple</Radio>
							<Radio value="banana">Banana</Radio>
						</RadioGroup>
						<div
								style={{
									backgroundColor: '#f5f5f5',
									padding: '1rem',
									borderRadius: '4px',
									maxHeight: '200px',
									overflowY: 'auto',
								}}>
							<h4 style={{ margin: '0 0 0.5rem' }}>Log Panel</h4>
								{log.map((entry) => (
									<pre style={{ fontFamily: 'monospace' }}>{entry}</pre>
								))}
						</div>
					<div>
				)
			}
	 }

	 // ❌ Bad example - `RadioGroupDemo` removes all details,
	 // making the story hard to understand
	 const RadioGroupDemo: (args) => {
			  const [logs, setLogs] = useState<string[]>([])

				return (
					<div>
					  <RadioGroup onChange={value => {
							setLogs(logs => [...logs, `selection changed: ${value}`])
						}}>
						  <Radio value="apple">Apple</Radio>
							<Radio value="banana">Banana</Radio>
						</RadioGroup>
						<div
								style={{
									backgroundColor: '#f5f5f5',
									padding: '1rem',
									borderRadius: '4px',
									maxHeight: '200px',
									overflowY: 'auto',
								}}>
							<h4 style={{ margin: '0 0 0.5rem' }}>Log Panel</h4>
								{log.map((entry) => (
									<pre style={{ fontFamily: 'monospace' }}>{entry}</pre>
								))}
						</div>
					<div>
				)
	 }

	 export const OnChange: Story = {
		  render: RadioGroupDemo
	 }
	 ```

## Testing and Documentation

1. Stories serve as visual tests and documentation
2. Include edge cases and error states
3. Document component props and usage in the story file
4. Use story parameters to add documentation:
   ```ts
	 import { defineDocsParam } from '@repobuddy/storybook'

	 export const SomeStory: Story = {
		parameters: defineDocsParam({
			description: {
				story: 'Additional message goes here'
			}
		})
	 }
   ```
5. Use the `play` function to interact and validate the behavior.

## Example

```typescript
import type { Meta, StoryObj } from '@storybook/react'
import { CopyButton } from './copy-button.tsx'

const meta = {
  title: 'components/CopyButton/isDisabled',
  component: CopyButton,
  tags: ['autodocs'],
  parameters: {
    layout: 'centered',
  },
  argTypes: {
    backgroundColor: { control: 'color' },
  },
} satisfies Meta<typeof CopyButton>

export default meta

type Story = StoryObj<typeof meta>

export const Enabled: Story = {
	name: 'isDisabled: false',
  args: {
    label: 'Copy Button',
		isDisabled: false
  },
}

export const Disabled: Story = {
	name: 'isDisabled: true',
  args: {
    label: 'Copy Button',
		isDisabled: true
  },
}
```

## Best Practices

1. Keep stories simple and focused
2. Test all component variations
3. Include interactive examples where relevant
4. Use TypeScript for type safety
5. Follow the project's component guidelines

Remember to follow these guidelines when creating new Storybook stories.
When you use this rule file, let me know this rule file is being used in the chat by mentioning the rule filename.

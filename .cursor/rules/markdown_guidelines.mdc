---
description: >
  Use this rule whenever creating or editing any markdown (.md, .mdx) file—including documentation, READMEs, component and API docs, and Storybook docs—to ensure consistency, accessibility, and compliance with project markdown standards.
globs:
alwaysApply: false
---
# Markdown Content Guidelines

This rule provides comprehensive guidelines for writing markdown content that follows best practices and passes markdown linting in this project.

**When to use this rule:**
- Writing or editing README files
- Creating component documentation
- Writing API documentation
- Writing any documentation in .md or .mdx files
- Writing cursor rules
- Contributing to project documentation
- Creating Storybook documentation
- Writing commit messages (see also commit_messages.mdc rule)

## Quick Reference

### Essential Rules

- ✅ Use proper heading hierarchy (H1 → H2 → H3 → H4)
- ✅ Always specify language for code blocks
- ✅ Include alt text for images
- ✅ Use descriptive link text
- ✅ Leave blank lines around headings and lists
- ✅ Prefer shorter language identifiers (`ts` not `typescript`)

### Common Language Identifiers

- `tsx` - TypeScript React components
- `ts` - TypeScript files
- `js` - JavaScript files
- `sh` - Shell commands
- `jsonc` - JSON with comments
- `md` - Markdown content
- `css` - CSS stylesheets
- `html` - HTML markup

## Markdown Linting Configuration

The project uses markdownlint with relaxed settings:

- **Line length**: Disabled (no strict character limits)
- **Inline HTML**: Allowed (can use HTML when needed)
- **Heading start left**: Disabled (headings can be indented)
- **Duplicate headings**: Disabled (can have same heading text in different sections)

Reference: [.markdownlint-cli2.jsonc](mdc:.markdownlint-cli2.jsonc)

## Core Markdown Elements

### Headings

**Rules:**
- Use `#` for main title (H1) - only one per document
- Use `##` for section headings (H2)
- Use `###` for subsection headings (H3)
- Use `####` for sub-subsection headings (H4)
- Avoid using more than 4 levels of headings
- Leave one blank line before and after headings

**Example:**
```md
# Main Title

## Section Heading

### Subsection Heading

#### Sub-subsection Heading
```

### Text Formatting

**Common patterns:**

- **Bold** for emphasis: `**text**`
- *Italic* for secondary emphasis: `*text*`
- `Inline code` for code snippets: `` `code` ``
- ~~Strikethrough~~ for deprecated content: `~~text~~`
- `**Bold with *italic* inside**` for combined emphasis

### Lists

**Unordered lists:**
```md
- First item
- Second item
  - Sub-item (indent with 2 spaces)
  - Another sub-item
- Third item
```

**Ordered lists:**
```md
1. First step
2. Second step
   1. Sub-step (indent with 3 spaces)
   2. Another sub-step
3. Third step
```

**Rules:**
- Use `-` for unordered lists
- Use `1.` for ordered lists (numbers auto-increment)
- Indent sub-items with 2 spaces
- Leave blank line before and after lists

### Links

**Best practices:**
- Use descriptive link text
- Include title attribute for accessibility when helpful
- Use relative paths for internal links

**Examples:**
```md
[Visit our documentation](mdc:https:/example.com/docs "Documentation site")
[Component API](mdc:api.md)
[Back to top](mdc:#quick-reference)
```

### Images

**Rules:**
- Always include alt text for accessibility
- Use descriptive alt text
- Include title attribute when helpful

**Example:**
```md
![Component screenshot showing the button in action](mdc:button-example.png "Button component example")
```

### Code Blocks

**Rules:**
- Always specify the language for syntax highlighting
- Use triple backticks with language identifier
- Indent code blocks properly
- Prefer shorter language identifiers

**Examples:**
```tsx
export const Button = ({ children, onClick }: ButtonProps) => {
  return (
    <button onClick={onClick} className="btn">
      {children}
    </button>
  )
}
```

```sh
npm install @storybook/react
npm run storybook
```

```ts
interface ButtonProps {
  children: React.ReactNode
  onClick?: () => void
}
```

```jsonc
{
  "name": "storybook-addon",
  "version": "1.0.0",
  "scripts": {
    "build": "tsc"
  }
}
```

### Blockquotes

**Rules:**
- Use `>` for blockquotes
- Can be nested with multiple `>`
- Leave blank line before and after

**Example:**
```md
> This is a blockquote
>
> It can span multiple lines
>
>> This is a nested blockquote
```

### Tables

**Rules:**
- Use proper table formatting with headers
- Align columns appropriately
- Keep tables simple and readable

**Example:**
```md
| Prop | Type | Default | Description |
|------|------|---------|-------------|
| children | ReactNode | - | Button content |
| onClick | () => void | - | Click handler |
| disabled | boolean | false | Disabled state |
```

### Horizontal Rules

**Rules:**
- Use `---` for horizontal rules
- Leave blank lines before and after

**Example:**
```md
Content above

---

Content below
```

## Project-Specific Guidelines

### Component Documentation

**Structure:**

Here's an example of how to structure component documentation:

**Component Header:**
```md
## ComponentName

Brief description of what the component does.
```

**Usage Section:**
```tsx
import { ComponentName } from '@storybook/addon'

function Example() {
  return <ComponentName prop="value" />
}
```

**Props Table:**
```md
| Prop | Type | Default | Description |
|------|------|---------|-------------|
| prop | string | - | Description of the prop |
```

**Accessibility Section:**
```md
### Accessibility

- Describe accessibility features
- Mention ARIA attributes if used
- Note keyboard navigation support
```

### API Documentation

**Structure:**

**Function Header:**
```md
## functionName(param1, param2)

Description of what the function does.
```

**Parameters Section:**
```md
### Parameters

- `param1` (string): Description of parameter
- `param2` (number): Description of parameter
```

**Returns Section:**
```md
### Returns

- `Promise<Result>`: Description of return value
```

**Example Section:**
```ts
const result = await functionName('value', 42)
```

### Changelog Entries

**Format:**
```md
## [1.2.0] - 2024-01-15

### Added
- New feature description (#123)

### Changed
- Updated existing feature (#124)

### Fixed
- Bug fix description (#125)

### Breaking Changes
- Breaking change description (#126)
```

## Common Patterns

### Component Example Template

Here's a complete example of component documentation:

**Component Header:**
```md
## Button

A customizable button component with various styles and states.
```

**Usage Section:**
```tsx
import { Button } from './Button'

function Example() {
  return (
    <Button variant="primary" onClick={() => alert('Clicked!')}>
      Click me
    </Button>
  )
}
```

**Props Table:**
```md
| Prop | Type | Default | Description |
|------|------|---------|-------------|
| children | ReactNode | - | Button content |
| variant | 'primary' \| 'secondary' | 'primary' | Button style variant |
| disabled | boolean | false | Disabled state |
| onClick | () => void | - | Click handler |
```

**Accessibility Section:**
```md
### Accessibility

- Supports keyboard navigation (Enter/Space)
- Includes proper ARIA attributes
- High contrast ratio for all variants
```

### API Reference Template

Here's a complete example of API documentation:

**Function Header:**
```md
## createStory(config)

Creates a Storybook story with the specified configuration.
```

**Parameters Section:**
```md
### Parameters

- `config` (StoryConfig): Story configuration object
  - `component` (Component): React component to render
  - `args` (object): Default props for the component
  - `parameters` (object): Storybook parameters
```

**Returns Section:**
```md
### Returns

- `StoryObj`: Configured story object
```

**Example Section:**
```ts
import { createStory } from './utils'

export const Primary = createStory({
  component: Button,
  args: { variant: 'primary', children: 'Button' }
})
```

## Quality Checklist

Before submitting markdown content, ensure:

- [ ] All headings follow proper hierarchy (H1 → H2 → H3 → H4)
- [ ] Code blocks have appropriate language identifiers
- [ ] Links have descriptive text (not "click here")
- [ ] Images have meaningful alt text
- [ ] Lists are properly formatted with correct indentation
- [ ] Tables are aligned and readable
- [ ] No broken links or references
- [ ] Consistent formatting throughout the document
- [ ] Proper use of emphasis and code formatting
- [ ] Accessibility considerations addressed
- [ ] Using shortest appropriate language identifiers
- [ ] Blank lines around headings, lists, and code blocks

## Troubleshooting Common Issues

### Broken Links
- Use relative paths for internal links: `./file.md` not `/file.md`
- Check that referenced files exist
- Use `#heading-id` for internal page links

### Code Block Issues
- Ensure language identifier is specified
- Check that code is properly indented
- Use appropriate language for syntax highlighting

### Table Formatting
- Ensure header row is properly formatted
- Align separator row (`|------|`)
- Keep cell content concise

### Heading Hierarchy
- Don't skip heading levels (H1 → H3 is invalid)
- Use H1 only once per document
- Keep hierarchy logical and meaningful

## Integration with Other Rules

This rule works in conjunction with:

- [Code Quality](mdc:.cursor/rules/code_quality.mdc) - For code formatting standards
- [Naming Conventions](mdc:.cursor/rules/naming_conventions.mdc) - For file naming consistency
- [Commit Messages](mdc:.cursor/rules/commit_messages.mdc) - For commit message formatting

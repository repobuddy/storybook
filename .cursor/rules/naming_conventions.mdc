---
description:
globs:
alwaysApply: true
---
# File and Folder Naming Conventions

This rule defines the standard naming conventions for files and folders in this Storybook repository.

## Core Principle

**Use `snake_case` for all file and folder names** - This provides consistency across the entire codebase.

## Directory Structure

### Root Level Directories

- **`apps/`**: Application packages in the monorepo
- **`libs/`**: Library packages in the monorepo
- **`.cursor/`**: Cursor IDE configuration and rules
- **`.github/`**: GitHub-specific configuration
- **`.husky/`**: Git hooks configuration
- **`.changeset/`**: Changeset configuration for versioning
- **`.vscode/`**: VS Code workspace configuration
- **`.turbo/`**: Turbo build system cache

### Standard Package Structure

```
package/
├── src/
│   ├── components/     # Reusable components
│   ├── decorators/     # Storybook decorators
│   ├── parameters/     # Storybook parameters
│   ├── variants/       # Component variants
│   ├── testing/        # Testing utilities
│   ├── manager/        # Storybook manager
│   └── internal/       # Internal utilities
├── types/              # TypeScript type definitions
└── package.json        # Package configuration
```

## File Naming Rules

### All Files Use `snake_case`

- **React Components**: `button.tsx`, `show_html.tsx`
- **Storybook Stories**: `button.stories.tsx`, `show_html.stories.tsx`
- **TypeScript Files**: `types.ts`, `helpers.ts`, `constants.ts`
- **Configuration**: `build_config.ts`, `vite_config.ts`, `vitest_config.ts`
- **CSS Files**: `button.css`, `app.css`, `index.css`
- **Documentation**: `readme.md`, `overview.mdx`, `configure.mdx`
- **Context Files**: `variant_bar.ctx.ts`, `when_running_in_text.ctx.ts`

### File Extensions

- **React components**: `.tsx` for JSX, `.ts` for non-JSX
- **Stories**: `.stories.tsx`
- **Context files**: `.ctx.ts`
- **Configuration**: `.ts` for TypeScript configs, `.json`/`.jsonc` for JSON
- **Documentation**: `.md` for general docs, `.mdx` for Storybook docs

## Folder Naming Rules

### All Folders Use `snake_case`

- **Standard folders**: `components/`, `decorators/`, `parameters/`, `helpers/`, `utils/`, `types/`, `internal/`
- **Variant folders**: `color_theme_variants/`, `size_variants/`
- **Testing folders**: `testing/`, `when_running_in_test/`

## Special Cases

### Storybook Addon Directories

Storybook addon directories use a specific prefix pattern for consistency with the Storybook ecosystem:

- **Pattern**: `storybook_addon_[name]/`
- **Examples**: `storybook_addon_tag_badges/`, `storybook_addon_dark_mode/`
- **Reason**: Follows Storybook's official addon naming convention

### Legacy kebab-case Files

Some existing files and folders may use `kebab-case` due to historical reasons or external dependencies:

- **When to keep**: Existing files that work correctly and don't need refactoring
- **When to change**: New files or during active refactoring
- **Examples**: `storybook-addon-tag-badges/` (existing), `class-name-switcher/` (existing)

### Index Files

- **Use**: `index.ts` for package entry points only
- **Reason**: Standard convention for module entry points
- **Examples**: `src/index.ts`, `package/index.ts`
- **Note**: Barrel exports (re-exporting from directories) are not allowed

### Configuration Files

Some configuration files follow external tool conventions:

- **JSON configs**: `biome.jsonc`, `turbo.json`, `tsconfig.json` (keep as-is)
- **Build configs**: `vite.config.ts`, `vitest.config.ts` (can use kebab-case if preferred)
- **Reason**: Maintains compatibility with external tools and ecosystems

## Import/Export Conventions

### Named Exports

- **Components**: Use `PascalCase` for component exports (file names remain `snake_case`)
- **Utilities**: Use `camelCase` for function/utility exports
- **Types**: Use `PascalCase` for type exports

### Import Guidelines

- **Direct imports**: Import directly from source files, not from index files
- **File extensions**: Always include file extensions in import paths (required by `verbatimModuleSyntax`)
- **No barrel exports**: Do not create index files that re-export from directories
- **Examples**:
  ```ts
  // ✅ Correct: Direct import with extension
  import { ShowHtml } from './components/show_html.js'

  // ❌ Wrong: Missing file extension
  import { ShowHtml } from './components/show_html'

  // ❌ Wrong: Barrel export import
  import { ShowHtml } from './components'
  ```

## Examples

### Good Examples

```tsx
// File: libs/storybook/src/components/show_html.tsx
export const ShowHtml: React.FC<ShowHtmlProps> = ({ element, options }) => {
  // Component implementation
}
```

```tsx
// File: libs/storybook/src/components/show_html.stories.tsx
export default {
  title: 'Components/ShowHtml',
  component: ShowHtml,
} as Meta
```

```ts
// File: libs/storybook/src/variants/helpers.ts
export const createVariantConfig = (config: VariantConfig) => {
  // Helper implementation
}
```

```ts
// File: libs/storybook/src/types.ts
export interface ShowHtmlProps {
  element: HTMLElement
  options?: HtmlfyOptions
}
```

### Bad Examples

```md
# ❌ Wrong file naming
libs/storybook/src/components/ShowHtml.tsx
libs/storybook/src/components/show-html.tsx

# ❌ Wrong folder naming
libs/storybook/src/storybook-addon-tag-badges/
libs/storybook/src/StorybookAddonTagBadges/

# ❌ Wrong story naming
libs/storybook/src/components/show_html.stories.js
```

## Enforcement

### Tools

- **Biome**: Consistent formatting and naming
- **TypeScript**: Strict mode for type safety
- **Git Hooks**: Pre-commit checks for naming conventions

### IDE Configuration

- Configure VS Code/Cursor to show naming violations
- Use workspace settings for consistent formatting

## Migration Guidelines

### When Renaming Files

1. Update all import statements
2. Update Storybook story references
3. Update documentation links
4. Update test file references
5. Commit changes with descriptive message

### When Adding New Files

1. Use `snake_case` for file and folder names
2. Use appropriate file extensions
3. Place files in correct directories
4. Import directly from source files
5. Add appropriate stories for components

## Related Rules

- [React Component Specification](mdc:.cursor/rules/react_component_spec.mdc) - Component structure and naming
- [Storybook Stories](mdc:.cursor/rules/storybook_stories.mdc) - Story file conventions
- [TypeScript Patterns](mdc:.cursor/rules/typescript_patterns.mdc) - TypeScript naming patterns
- [Code Quality](mdc:.cursor/rules/code_quality.mdc) - Overall code quality standards
- [Monorepo Best Practices](mdc:.cursor/rules/monorepo_best_practices.mdc) - Monorepo structure guidelines

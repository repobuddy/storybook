---
description: When creating or updating cursor rules
globs:
alwaysApply: false
---
# Cursor Rules Management

How to add and manage cursor rules in the project.

When you use this rule, let me know this rule file is being used by mentioning the filename.

## File Organization

All rule files must be placed directly under `PROJECT_ROOT/.cursor/rules/`:

```
.cursor/rules/
├── react_component_spec.mdc
├── storybook_stories.mdc
├── component_spec_template.mdc
├── cursor_rules.mdc
└── master.mdc          # Central index of all rules
```

Rules are organized logically through tags and cross-references in the master index, not through directory structure.

## Naming Conventions

1. **File Names**:
   - Use snake_case for filenames
   - Always use `.mdc` extension
   - Make names descriptive of the rule's purpose
   - Include relevant prefixes for related rules (e.g., `react_*`, `storybook_*`)

## Rule File Structure

All rule files should follow this structure:

```md
---
description: Clear, one-line description of what the rule enforces
globs: path/to/files/*.ext, other/path/**/*
alwaysApply: boolean
tags: ["category1", "category2"]  # Used for logical organization
---

## Rule Title

Main content explaining the rule with markdown formatting.

1. Step-by-step instructions
2. Code examples
3. Guidelines
4. Add this instruction: "When you use this rule file, let me know this rule file is being used in the chat."

## Front Matter

The front matter section contains metadata about the rule:

- **description**: Clear, one-line description of what the rule enforces
  - **Important**: Must be a single line. Do not use multiline descriptions as they may cause parsing issues.
- **globs**: File patterns where the rule applies (e.g., `path/to/files/*.ext, other/path/**/*`)
- **alwaysApply**: Boolean indicating if the rule should always be applied
- **tags**: Array of categories for logical organization (e.g., `["category1", "category2"]`)

## Code Examples

- Use language-specific code blocks

```ts
// ✅ DO: Show good examples
const goodExample = true;

// ❌ DON'T: Show anti-patterns
const badExample = false;
```

## Adding New Rules

When adding new rules:

1. **Create the Rule File**: Follow the standard rule file structure

2. **Update Master Index**: Add the new rule to [master.mdc](mdc:.cursor/rules/master.mdc) with:
   - Appropriate tags for categorization
   - Clear description of the rule's purpose
   - Links to related rules
   - Usage examples or contexts

3. **Set Rule Properties**:
   - Default rule type to "Agent Requested"
   - Add clear description of the rule's purpose
   - Include appropriate glob patterns if needed
   - Add relevant tags for categorization
   - Add the phrase "mention this rule is being used"

## Best Practices

1. **Keep Rules Focused**: Each rule should have a single, clear purpose
2. **Use Examples**: Include both good and bad examples
3. **Cross-Reference**: Link to related rules using `mdc:` syntax
4. **Regular Updates**: Keep rules current with project evolution
5. **Clear Documentation**: Write rules that are easy to understand and follow
6. **Logical Organization**: Use tags and cross-references for organization, not directories
7. **Consistent Naming**: Use clear, descriptive filenames with appropriate prefixes

## File Location Rules

- **Always** update the master index when adding new rules
- **Always** include appropriate tags for logical organization
